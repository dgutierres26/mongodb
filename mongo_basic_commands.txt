// show Databases
show dbs

// Create Databases
use people

# Collections are equivilent to table in SQL language

// Create a Collections
db.createCollection("person")

// Insert Data
db.person.insert(
    {
        name: "Jonh",
        age: 30
    }
)

// Find a Data - Equivilent to SELECT * FROM person in SQL language
db.person.find()

// Display data in a better way
db.person.find().pretty()

// Clean MongoDB Terminal
cls

// Show Collections
show Collections

// Delete/Drop Collections
db.pesron.drop()

// Insert Multiple Data
db.person.insert(
    [
        {
            name: "John",
            age: 30
        },
        {
            name: "Mary",
            age: 27
        },
        {
            name: "Ana",
            age: 21
        }
    ]
)

// Update Data (careful)(Overwrite)
db.person.update(
    {_id: ObjectId("5fa3ef16929bb20370e90f1a")},
    {age:25}
)

// Update that updates a data and keep the rest
db.person.update(
     {_id: ObjectId("5fa3ef16929bb20370e90f1a")},
     {
        $set: {
         name: "John"
        }
     }
)

// Find a data by parameter
db.person.find(
    {
        name: "John"
    }
).pretty()

// Sort Data - number 1 is ascending and -1 is descending sort
db.person.find().sort(
    {name: 1 }
).pretty()

// Limit of Results
# limit of all Results
db.person.find().limit(2)

# Limit of elements age 55
db.person.find({age: 55}).limit(2).pretty()

# Limit of elements age 55 and sorted by name
db.person.find({age: 55}).sort({name:1}).limit(2).pretty()

// Get Size/ Count elements
db.person.count()

// Add new Field to an elements
db.person.update(
    {_id: ObjectId("5fa3ef16929bb20370e90f1a") },
    {
        $push: { kids: ["Taba", "Naruna", "Josefina"]}
    }
)

// Unset a Field
db.person.update(
    {_id: ObjectId("5fa3fedfeeec8e0b1195084a") },
    {
        $unset: {surname: ""}
    }
)

// Find based on more than one parameter
db.person.find(
    {name: "John", surname:"Cachumba"}
).prett()

// How to get all collection names
db.getCollectionNames()

// Remove an elements
db.person.remove(
    {
        _id: ObjectId("5fa5381d505510292a3fc3a3")
    }
)

// Conditional Operators
# If something is less than (<)
db.person.find(
    {
        age: { $lt: 25}
    }
)

# If something greater than (>)
db.person.find(
    {
        age: { $gt: 25}
    }
)

# If something is greater and equal (>=)
db.person.find(
    {
        age: {$gte: 25}
    }
)

# If something is less or equal than(<=)
db.person.find(
    {
        age: {$lte: 25}
    }
)

# If something is different than (!=)
db.person.find(
    {
        age: {$ne: 25}
    }
)

// If something is equal or (||)


// Check if a filed/ attribute exist in an element and return them
# There is the filed
db.person.find(
    {
        kids: {$exists: true}
    }
)

# There is not the field
db.person.find(
    {
        kids: {$exists: false}
    }
)

//
db.person.find(
    {
        kids: {$in: ["Tom", "Peter]}
    }
).pretty()

//Uptade  multiple elements
db.person.update(
    {},
    {
        $set: { job: "yes"}
    },
    {multi: true}
)
    or
db.person.updateMany(
    {},
    {
        $set: { job: false}
    }
)

// Get Index
db.person.getIndexes()

db.person.createIndex(
    {name: "text", surname: "text"}
)

db.person.find(
    {
       $text: {$search: "John"} 
    }
).pretty()

// This update Overwrite the data
db.person.update(
    {name: "John"},
    {
        position: "Java Programmer"
    }
)

// Upserts create new field or update the field
db.person.update(
    {_id: ObjectId("5fa3fedfeeec8e0b1195084a")},
    {
        name: "John",
        surname: "Doe"
    },
    {upsert: true}
)

// Increment
db.books.update(
   {name: "Harry Potter"},
   {
       $inc: { likes: 1 }
    }
 )

 # Increment and Upsert
  db.person.update(
    {name: "John"},
    {
       $inc: {likes: 1 }
    },
    { upsert: true}
 )
 